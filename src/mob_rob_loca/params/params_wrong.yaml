bt_navigator:
  ros__parameters:
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odometry/global
    bt_loop_duration: 10
    default_server_timeout: 20 
    enable_groot_monitoring: False
    groot_zmq_publisher_port: 1666
    groot_zmq_server_port: 1667
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    default_nav_to_pose_bt_xml: "/home/coderey/ros2_ws/src/mob_rob_loca/config/nav2pose.xml"
    default_nav_through_poses_bt_xml: "/home/coderey/ros2_ws/src/mob_rob_loca/config/navthroughposes.xml"
    plugin_lib_names:
        - nav2_compute_path_to_pose_action_bt_node
        - nav2_compute_path_through_poses_action_bt_node
        - nav2_follow_path_action_bt_node
        - nav2_back_up_action_bt_node
        - nav2_spin_action_bt_node
        - nav2_wait_action_bt_node
        - nav2_clear_costmap_service_bt_node
        - nav2_is_stuck_condition_bt_node
        - nav2_goal_reached_condition_bt_node
        - nav2_goal_updated_condition_bt_node
        - nav2_initial_pose_received_condition_bt_node
        - nav2_reinitialize_global_localization_service_bt_node
        - nav2_rate_controller_bt_node
        - nav2_distance_controller_bt_node
        - nav2_speed_controller_bt_node
        - nav2_truncate_path_action_bt_node
        - nav2_goal_updater_node_bt_node
        - nav2_recovery_node_bt_node
        - nav2_pipeline_sequence_bt_node
        - nav2_round_robin_node_bt_node
        - nav2_transform_available_condition_bt_node
        - nav2_time_expired_condition_bt_node
        - nav2_distance_traveled_condition_bt_node
        - nav2_single_trigger_bt_node
        - nav2_is_battery_low_condition_bt_node
        - nav2_navigate_through_poses_action_bt_node
        - nav2_navigate_to_pose_action_bt_node
        - nav2_remove_passed_goals_action_bt_node
        - nav2_planner_selector_bt_node
        - nav2_controller_selector_bt_node
        - nav2_goal_checker_selector_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: False

controller_server:
  ros__parameters:
    use_sim_time: False
    controller_frequency: 10.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.001
    min_theta_velocity_threshold: 0.001
    odom_topic: /odometry/global
    action_server_result_timeout: 300 # The timeout value (in seconds) for action servers to discard a goal handle if a result has not been produced
    failure_tolerance: 0.3 # The maximum duration in seconds the called controller plugin can fail 
    progress_checker_plugin: ["progress_checker"] # ..._plugins but without s for humble and older versions
    goal_checker_plugin: "goal_checker" # "precise_goal_checker"
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.2 # Minimum amount a robot must move to be progressing to goal (m).
      movement_time_allowance: 10.0 # Maximum amount of time a robot has to move the minimum radius (s).
    goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.05
      yaw_goal_tolerance: 0.25
      stateful: True # Whether to check for XY position tolerance after rotating to goal orientation in case of minor localization changes.
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True # whether to publish it on a topic (?)
      min_vel_x: 0.0
      min_vel_y: 0.0
      max_vel_x: 0.26
      max_vel_y: 0.0
      max_vel_theta: 1.0
      min_speed_xy: 0.0
      max_speed_xy: 0.26
      min_speed_theta: 0.0
      acc_lim_x: 2.0
      acc_lim_y: 0.0
      acc_lim_theta: 3.0
      decel_lim_x: -2.0
      decel_lim_y: 0.0
      decel_lim_theta: -3.0
      vx_samples: 1
      vy_samples: 1
      vtheta_samples: 20
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.05
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      stateful: True
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 15.0 ######################################### to check if correct
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 15.0
      GoalDist.scale: 10.0
      RotateToGoal.scale: 15.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0

controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

# GPS WPF CHANGE: Remove static layer
local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: False
      rolling_window: True
      width: 3
      # When using GPS navigation you will potentially traverse huge environments which are not practical to
      # fit on a big static costmap. Thus it is recommended to use a rolling global costmap large enough to 
      # contain each pair of successive waypoints. See: https://github.com/ros-
      height: 3
      resolution: 0.05
      robot_radius: 0.25
      filters: ["keepout_filter"]
      keepout_filter:
        plugin: "nav2_costmap_2d::KeepoutFilter"
        topic_name: "/keepout_filter_mask"
        enabled: True
        filter_info_topic: "/costmap_filter_info"
      always_send_full_costmap: True

local_costmap_client:
    ros__parameters:
      use_sim_time: False

local_costmap_rclcpp_node:
  ros__parameters:
    use_sim_time: False
# GPS WPF CHANGE: Remove static layer
# GPS WPF CHANGE: Set rolling global costmap with 50x50 size. See note below
global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: False
      robot_radius: 0.25
      resolution: 0.005
      # When using GPS navigation you will potentially traverse huge environments which are not practical to
      # fit on a big static costmap. Thus it is recommended to use a rolling global costmap large enough to 
      # contain each pair of successive waypoints. See: https://github.com/ros-planning/navigation2/issues/2174
      rolling_window: True
      width: 50
      height: 50
      track_unknown_space: false
      # no static map]
      filters: ["keepout_filter", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.01 # 5cm + 12.5cm, increased a bit for testing
      keepout_filter:
        plugin: "nav2_costmap_2d::KeepoutFilter"
        topic_name: "/keepout_filter_mask"
        enabled: True
        filter_info_topic: "/costmap_filter_info"
      always_send_full_costmap: True

global_costmap_client:
  ros__parameters:
    use_sim_time: False

global_costmap_rclcpp_node:
  ros__parameters:
    use_sim_time: False

map_server:
  ros__parameters:
    use_sim_time: False
    yaml_filename: "/home/coderey/ros2_ws/src/mob_rob_loca/maps/circuit.yaml"
    frame_id: "map"

map_saver:
  ros__parameters:
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 2.0
    use_sim_time: False
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: 'nav2_navfn_planner/NavfnPlanner' # "nav2_straightline_planner/StraightLine"
      tolerance: 0.05
      use_astar: false
      allow_unknown: true
      interpolation_resolution: 0.1

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

recoveries_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    recovery_plugins: ["spin", "backup", "wait"]
    spin:
      plugin: "nav2_recoveries/Spin"
    backup:
      plugin: "nav2_recoveries/BackUp"
    wait:
      plugin: "nav2_recoveries/Wait"
    global_frame: odom
    robot_base_frame: base_link
    transform_timeout: 0.1
    use_sim_time: true
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.0

smoother_server:
  ros__parameters:
    use_sim_time: False
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    local_costmap_topic: local_costmap/costmap_raw
    global_costmap_topic: global_costmap/costmap_raw
    local_footprint_topic: local_costmap/published_footprint
    global_footprint_topic: global_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    wait:
      plugin: "nav2_behaviors/Wait"
    local_frame: odom
    global_frame: map
    robot_base_frame: base_link
    transform_tolerance: 0.1
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.0

waypoint_follower:
  ros__parameters:
    stop_on_failure: true
    loop_rate: 20
    global_frame_id: map
    action_server_result_timeout: 30.0 #seconds
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 0

velocity_smoother:
  ros__parameters:
    smoothing_frequency: 20.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [0.26, 0.0, 1.0]
    min_velocity: [-0.26, 0.0, -1.0]
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]
    odom_topic: "/odometry/global"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
  